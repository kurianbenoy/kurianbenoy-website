---
title: Whisper Normalizer - Python Package
date: 2024-02-16
author: "Kurian Benoy"
type: post
draft: true
---

Recently, I shared on [LinkedIn](https://www.linkedin.com/posts/kurianbenoy_last-year-march-i-created-a-python-package-activity-7163888439497515008-zKjw?utm_source=share&utm_medium=member_desktop) about a Python package I maintain called `whisper_normalizer`.
This package currently has almost 30,000+ monthly downloads. This blog post discusses what this package does, its current state, and future plans.

![](whisper_normalizer/Picture5.png)


![](whisper_normalizer/No_of_downloads.png)


## Why Should We Normalize/Standardize Text?

- In ASR systems, it’s important to normalize the text to reduce unintentional penalties in metrics like WER, CER, etc.
- Text normalization/standardization is the process of converting texts in different styles into a standardized form. This is a best-effort attempt to penalize only when a word error is caused by actually mis-transcribing a word, and not by formatting or punctuation differences.


## What Does Whisper Normalization Do?

1. BasicTextNormalizer: Usually for multi-lingual languages
2. EnglishTextNormalizer: English

## What Does BasicTextNormalizer Do?

As per the text normalization/standardization approach mentioned in Appendix Section C pp.21 in the paper "Robust Speech Recognition via Large-Scale Weak Supervision", the BasicTextNormalizer performs the following functions:

- Removes any phrases between matching brackets ([, ]).
- Removes any phrases between matching parentheses ((, )).
- Replaces any markers, symbols, and punctuation characters with a space, i.e., when the Unicode category of each character in the NFKC-normalized string starts with M, S, or P.
- Makes the text lowercase.
- Replaces any successive whitespace characters with a space.

## What Does EnglishTextNormalizer Do?

As per the text normalization/standardization approach in Appendix Section C pp.21 of the paper "Robust Speech Recognition via Large-Scale Weak Supervision", the EnglishTextNormalizer performs the following functions:

- Removes any phrases between matching brackets ([, ]).
- Removes any phrases between matching parentheses ((, )).
- Removes any of the following words: hmm, mm, mhm, mmm, uh, um.
- Removes whitespace characters that come before an apostrophe ’.
- Converts standard or informal contracted forms of English into the original form.
- Removes commas (,) between digits.
- Removes periods (.) not followed by numbers.
- Removes symbols as well as diacritics from the text, where symbols are the characters with the Unicode category starting with M, S, or P, except period, percent, and currency symbols that may be detected in the next step.
- Detects any numeric expressions of numbers and currencies and replaces them with a form using Arabic numbers, e.g., “Ten thousand dollars” → “$10000”.
- Converts British spellings into American spellings.
- Removes remaining symbols that are not part of any numeric expressions.
- Replaces any successive whitespace characters with a space.

## Incredible Growth of Whisper Normalizer Package



## Issue with Whisper Normalizer in Malayalam

![](whisper_normalizer/Picture1.png)
![](whisper_normalizer/Picture2.png)
![](whisper_normalizer/Picture3.png)
![](whisper_normalizer/Picture4.png)

Thanks to Kavya Manohar

## How to Solve These Issues?

- Use better libraries like indic-nlp-library[11] or libindic Normalizer[10], which support Malayalam text normalization.


## Is It Perfect?

https://www.linkedin.com/posts/kavya-manohar_indiclanguagenormalization-asr-tts-activity-7163964868541267968-iI2q?utm_source=share&utm_medium=member_desktop

These libraries are not perfect though:
- More text cleanup is required.
- They need to handle numbers in Malayalam and even more Indic languages.
- They need to expand abbreviations like currency, numbers, fractions for ASR and TTS tasks.

Kavya Manohar and I are teaming up to solve and work on these issues.
